name: Post Modernization Checks

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

permissions:
  contents: write

jobs:
  detect-language:
    if: startsWith(github.head_ref, 'Q-TRANSFORM-issue-')
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Project Language
        id: detect
        run: |
          if [ -f "pom.xml" ]; then
            echo "language=java" >> $GITHUB_OUTPUT
          elif ls *.sln 1> /dev/null 2>&1 || ls *.csproj 1> /dev/null 2>&1; then
            echo "language=dotnet" >> $GITHUB_OUTPUT
          else
            echo "language=unknown" >> $GITHUB_OUTPUT
          fi

  build:
    needs: detect-language
    if: needs.detect-language.outputs.language != 'unknown'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Environment
        if: needs.detect-language.outputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up .NET
        if: needs.detect-language.outputs.language == 'dotnet'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Build Project
        run: |
          case "${{ needs.detect-language.outputs.language }}" in
            java)
              mvn clean install -DskipTests | tee build.log
              ;;
            dotnet)
              dotnet build --no-restore | tee build.log
              ;;
          esac

      - uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log

  test:
    needs: [detect-language, build]
    if: needs.detect-language.outputs.language != 'unknown'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Environments
        if: needs.detect-language.outputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up .NET
        if: needs.detect-language.outputs.language == 'dotnet'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Run Tests
        run: |
          case "${{ needs.detect-language.outputs.language }}" in
            java)
              mvn test | tee test.log
              ;;
            dotnet)
              dotnet test --no-build --logger "trx;LogFileName=test_results.trx" | tee test.log
              ;;
          esac

      - uses: actions/upload-artifact@v4
        with:
          name: test-log
          path: test.log

  lint:
    needs: [detect-language, build]
    if: needs.detect-language.outputs.language != 'unknown'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        if: needs.detect-language.outputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up .NET
        if: needs.detect-language.outputs.language == 'dotnet'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Run Linter
        run: |
          case "${{ needs.detect-language.outputs.language }}" in
            java)
              mvn checkstyle:checkstyle | tee lint.log
              ;;
            dotnet)
              dotnet tool install -g dotnet-format
              export PATH="$PATH:$HOME/.dotnet/tools"
              dotnet format --verify-no-changes | tee lint.log
              ;;
          esac

      - uses: actions/upload-artifact@v4
        with:
          name: lint-log
          path: lint.log

  security:
    needs: [detect-language, build]
    if: needs.detect-language.outputs.language != 'unknown'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        if: needs.detect-language.outputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up .NET
        if: needs.detect-language.outputs.language == 'dotnet'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Run Security Scan
        run: |
          case "${{ needs.detect-language.outputs.language }}" in
            java)
              curl -L -o dc.zip https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
              unzip -q dc.zip -d dc
              chmod +x dc/dependency-check/bin/dependency-check.sh
              dc/dependency-check/bin/dependency-check.sh --project project --scan . --format ALL --out security-report | tee security.log
              ;;
            dotnet)
              dotnet list package --vulnerable | tee security.log
              ;;
          esac

      - uses: actions/upload-artifact@v4
        with:
          name: security-log
          path: security.log

  report:
    if: startsWith(github.head_ref, 'Q-TRANSFORM-issue-') || always()
    runs-on: ubuntu-latest
    needs: [detect-language, build, test, lint, security]
    steps:
      - uses: actions/checkout@v4

      - name: Download Logs
        uses: actions/download-artifact@v4
        with:
          path: logs

      - name: Generate Markdown Report
        env:
          LANGUAGE: ${{ needs.detect-language.outputs.language }}
        run: |
          set -e
          trap 'echo "❌ Script failed at line $LINENO"; exit 1' ERR

          [ -d reports ] || mkdir reports

          DATE=$(date +%Y-%m-%d)
          REPORT="reports/post-modernization-${DATE}.md"

          {
            echo "# 🛠️ Post-Modernization Report"
            echo "_Generated on $(date)_"
            echo ""
            echo "## 🧠 Detected Project Language"
            echo "The project was detected as: **${LANGUAGE}**"
            echo ""
          } > "$REPORT"

          for job in build test lint security; do
            LOGFILE="logs/${job}-log/${job}.log"
            JOB_TITLE="$(echo $job | sed -e 's/^./\u&/')"

            echo "Processing job: $job"

            {
              echo "## 🔹 ${JOB_TITLE} Result"
              if [[ -f "$LOGFILE" ]]; then
                ERRCOUNT=$(grep -iE "error|failed|exception" "$LOGFILE" | wc -l | tr -d ' ')
                if [[ "$ERRCOUNT" -gt 0 ]]; then
                  echo "**❌ Failed — $ERRCOUNT issue(s) found**"
                else
                  echo "**✅ Succeeded**"
                fi
              else
                echo "**⚠️ No log found (job may not have run)**"
              fi
              echo ""
            } >> "$REPORT"
          done

      - name: Commit and Push Report
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git fetch origin
          git checkout -b pr-branch origin/${{ github.head_ref }}

          git add reports/post-modernization-*.md
          git commit -m "📄 Add post-modernization report with logs [skip ci]" || echo "No changes to commit"
          git pull --rebase origin ${{ github.head_ref }}
          git push origin pr-branch:${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
